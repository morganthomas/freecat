List : Type -> Type;
empty : {a : Type} -> List a;
cons : {a : Type} -> a -> List a -> List a;

map : {a : Type} -> {b : Type} -> (a -> b) -> List a -> List b;
map f empty => empty;
map f (cons x xs) => cons (f x) (map f xs);

Foo : Type;
foo : Foo;
bar : Foo;
baz : Foo;

Bar : Type;
oof : Bar;
rab : Bar;
zab : Bar;

squee : Foo -> Bar;
squee foo => oof;
squee bar => rab;
squee baz => zab;

example : List Bar;
example => map (\x : Foo => squee x) (cons foo (cons bar (cons baz empty)));
